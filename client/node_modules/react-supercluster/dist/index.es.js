import { useRef, useState, useEffect } from 'react';
import Supercluster from 'supercluster';

var useSupercluster = function (_a) {
    var points = _a.points, bounds = _a.bounds, zoom = _a.zoom, options = _a.options;
    var superclusterRef = useRef();
    var _b = useState([]), clusters = _b[0], setClusters = _b[1];
    useEffect(function () {
        if (!superclusterRef.current) {
            superclusterRef.current = new Supercluster(options);
        }
        superclusterRef.current.load(points);
        if (bounds && zoom) {
            setClusters(superclusterRef.current.getClusters(bounds, zoom));
        }
    }, [points]);
    useEffect(function () {
        if (superclusterRef.current && bounds && zoom) {
            setClusters(superclusterRef.current.getClusters(bounds, zoom));
        }
    }, [bounds, zoom]);
    return {
        clusters: clusters,
        supercluster: superclusterRef.current,
    };
};

export default useSupercluster;
//# sourceMappingURL=index.es.js.map
